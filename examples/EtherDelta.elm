module Contracts.EtherDelta exposing
    ( Cancel
    , Deposit
    , Order
    , OrderFill
    , Trade
    , Withdraw
    , accountLevelsAddr
    , admin
    , amountFilled
    , availableVolume
    , balanceOf
    , cancelDecoder
    , cancelEvent
    , cancelOrder
    , changeAccountLevelsAddr
    , changeAdmin
    , changeFeeAccount
    , changeFeeMake
    , changeFeeRebate
    , changeFeeTake
    , deposit
    , depositDecoder
    , depositEvent
    , depositToken
    , feeAccount
    , feeMake
    , feeRebate
    , feeTake
    , order
    , orderDecoder
    , orderEvent
    , orderFills
    , orderFillsDecoder
    , orders
    , testTrade
    , tokens
    , trade
    , tradeDecoder
    , tradeEvent
    , withdraw
    , withdrawDecoder
    , withdrawEvent
    , withdrawToken
    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v3.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- accountLevelsAddr() function


accountLevelsAddr : Address -> Call Address
accountLevelsAddr contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f3412942" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- admin() function


admin : Address -> Call Address
admin contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f851a440" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32) function


amountFilled : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> Hex -> Hex -> Call BigInt
amountFilled contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ user_ v_ r_ s_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "46be96c3" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_, E.address user_, E.uint v_, E.staticBytes 32 r_, E.staticBytes 32 s_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32) function


availableVolume : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> Hex -> Hex -> Call BigInt
availableVolume contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ user_ v_ r_ s_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "fb6e155f" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_, E.address user_, E.uint v_, E.staticBytes 32 r_, E.staticBytes 32 s_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- balanceOf(address,address) function


balanceOf : Address -> Address -> Address -> Call BigInt
balanceOf contractAddress token_ user_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f7888aec" [ E.address token_, E.address user_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32) function


cancelOrder : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> BigInt -> Hex -> Hex -> Call ()
cancelOrder contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ v_ r_ s_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "278b8c0e" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_, E.uint v_, E.staticBytes 32 r_, E.staticBytes 32 s_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeAccountLevelsAddr(address) function


changeAccountLevelsAddr : Address -> Address -> Call ()
changeAccountLevelsAddr contractAddress accountLevelsAddr__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e8f6bc2e" [ E.address accountLevelsAddr__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeAdmin(address) function


changeAdmin : Address -> Address -> Call ()
changeAdmin contractAddress admin__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8f283970" [ E.address admin__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeFeeAccount(address) function


changeFeeAccount : Address -> Address -> Call ()
changeFeeAccount contractAddress feeAccount__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "71ffcb16" [ E.address feeAccount__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeFeeMake(uint256) function


changeFeeMake : Address -> BigInt -> Call ()
changeFeeMake contractAddress feeMake__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "54d03b5c" [ E.uint feeMake__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeFeeRebate(uint256) function


changeFeeRebate : Address -> BigInt -> Call ()
changeFeeRebate contractAddress feeRebate__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "5e1d7ae4" [ E.uint feeRebate__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- changeFeeTake(uint256) function


changeFeeTake : Address -> BigInt -> Call ()
changeFeeTake contractAddress feeTake__ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8823a9c0" [ E.uint feeTake__ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- deposit() function


deposit : Address -> Call ()
deposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "d0e30db0" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- depositToken(address,uint256) function


depositToken : Address -> Address -> BigInt -> Call ()
depositToken contractAddress token_ amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "338b5dea" [ E.address token_, E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- feeAccount() function


feeAccount : Address -> Call Address
feeAccount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "65e17c9d" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- feeMake() function


feeMake : Address -> Call BigInt
feeMake contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "57786394" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- feeRebate() function


feeRebate : Address -> Call BigInt
feeRebate contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "731c2f81" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- feeTake() function


feeTake : Address -> Call BigInt
feeTake contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c281309e" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- order(address,uint256,address,uint256,uint256,uint256) function


order : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Call ()
order contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "0b927666" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- orderFills(address,bytes32) function


type alias OrderFill =
    { v0 : BigInt
    , v1 : BigInt
    , v2 : BigInt
    }


orderFills : Address -> Address -> Hex -> Call OrderFill
orderFills contractAddress a_ b_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "19774d43" [ E.address a_, E.staticBytes 32 b_ ]
    , nonce = Nothing
    , decoder = orderFillsDecoder
    }


orderFillsDecoder : Decoder OrderFill
orderFillsDecoder =
    abiDecode OrderFill
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder



-- orders(address,bytes32) function


orders : Address -> Address -> Hex -> Call Bool
orders contractAddress a_ b_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "bb5f4629" [ E.address a_, E.staticBytes 32 b_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }



-- testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address) function


testTrade : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> Hex -> Hex -> BigInt -> Address -> Call Bool
testTrade contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ user_ v_ r_ s_ amount_ sender_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "6c86888b" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_, E.address user_, E.uint v_, E.staticBytes 32 r_, E.staticBytes 32 s_, E.uint amount_, E.address sender_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }



-- tokens(address,address) function


tokens : Address -> Address -> Address -> Call BigInt
tokens contractAddress a_ b_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "508493bc" [ E.address a_, E.address b_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256) function


trade : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> Hex -> Hex -> BigInt -> Call ()
trade contractAddress tokenGet_ amountGet_ tokenGive_ amountGive_ expires_ nonce_ user_ v_ r_ s_ amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "0a19b14a" [ E.address tokenGet_, E.uint amountGet_, E.address tokenGive_, E.uint amountGive_, E.uint expires_, E.uint nonce_, E.address user_, E.uint v_, E.staticBytes 32 r_, E.staticBytes 32 s_, E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- withdraw(uint256) function


withdraw : Address -> BigInt -> Call ()
withdraw contractAddress amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "2e1a7d4d" [ E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- withdrawToken(address,uint256) function


withdrawToken : Address -> Address -> BigInt -> Call ()
withdrawToken contractAddress token_ amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "9e281a98" [ E.address token_, E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- Cancel(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32) event


type alias Cancel =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , expires : BigInt
    , nonce : BigInt
    , user : Address
    , v : BigInt
    , r : Hex
    , s : Hex
    }


cancelEvent : Address -> LogFilter
cancelEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0" ]
    }


cancelDecoder : Decoder Cancel
cancelDecoder =
    Decode.succeed Cancel
        |> custom (data 0 D.address)
        |> custom (data 1 D.uint)
        |> custom (data 2 D.address)
        |> custom (data 3 D.uint)
        |> custom (data 4 D.uint)
        |> custom (data 5 D.uint)
        |> custom (data 6 D.address)
        |> custom (data 7 D.uint)
        |> custom (data 8 (D.staticBytes 32))
        |> custom (data 9 (D.staticBytes 32))



-- Deposit(address,address,uint256,uint256) event


type alias Deposit =
    { token : Address
    , user : Address
    , amount : BigInt
    , balance : BigInt
    }


depositEvent : Address -> LogFilter
depositEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7" ]
    }


depositDecoder : Decoder Deposit
depositDecoder =
    Decode.succeed Deposit
        |> custom (data 0 D.address)
        |> custom (data 1 D.address)
        |> custom (data 2 D.uint)
        |> custom (data 3 D.uint)



-- Order(address,uint256,address,uint256,uint256,uint256,address) event


type alias Order =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , expires : BigInt
    , nonce : BigInt
    , user : Address
    }


orderEvent : Address -> Maybe Address -> Maybe Address -> Maybe Address -> LogFilter
orderEvent contractAddress tokenGet_ tokenGive_ user_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e85"
        , Maybe.map (abiEncode << E.address) tokenGet_
        , Maybe.map (abiEncode << E.address) tokenGive_
        , Maybe.map (abiEncode << E.address) user_
        ]
    }


orderDecoder : Decoder Order
orderDecoder =
    Decode.succeed Order
        |> custom (topic 1 D.address)
        |> custom (data 0 D.uint)
        |> custom (topic 2 D.address)
        |> custom (data 1 D.uint)
        |> custom (data 2 D.uint)
        |> custom (data 3 D.uint)
        |> custom (topic 3 D.address)



-- Trade(address,uint256,address,uint256,address,address) event


type alias Trade =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , get : Address
    , give : Address
    }


tradeEvent : Address -> LogFilter
tradeEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d" ]
    }


tradeDecoder : Decoder Trade
tradeDecoder =
    Decode.succeed Trade
        |> custom (data 0 D.address)
        |> custom (data 1 D.uint)
        |> custom (data 2 D.address)
        |> custom (data 3 D.uint)
        |> custom (data 4 D.address)
        |> custom (data 5 D.address)



-- Withdraw(address,address,uint256,uint256) event


type alias Withdraw =
    { token : Address
    , user : Address
    , amount : BigInt
    , balance : BigInt
    }


withdrawEvent : Address -> LogFilter
withdrawEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "f341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567" ]
    }


withdrawDecoder : Decoder Withdraw
withdrawDecoder =
    Decode.succeed Withdraw
        |> custom (data 0 D.address)
        |> custom (data 1 D.address)
        |> custom (data 2 D.uint)
        |> custom (data 3 D.uint)
