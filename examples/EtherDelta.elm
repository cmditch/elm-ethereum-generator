module Contracts.EtherDelta
    exposing
        ( accountLevelsAddr
        , admin
        , amountFilled
        , availableVolume
        , balanceOf
        , cancelOrder
        , changeAccountLevelsAddr
        , changeAdmin
        , changeFeeAccount
        , changeFeeMake
        , changeFeeRebate
        , changeFeeTake
        , deposit
        , depositToken
        , feeAccount
        , feeMake
        , feeRebate
        , feeTake
        , order
        , OrderFill
        , orderFills
        , orderFillsDecoder
        , orders
        , testTrade
        , tokens
        , trade
        , withdraw
        , withdrawToken
        , Cancel
        , cancelEvent
        , cancelDecoder
        , Deposit
        , depositEvent
        , depositDecoder
        , Order
        , orderEvent
        , orderDecoder
        , Trade
        , tradeEvent
        , tradeDecoder
        , Withdraw
        , withdrawEvent
        , withdrawDecoder
        )

import BigInt exposing (BigInt)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (custom, decode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Abi.Decode as AbiDecode exposing (abiDecode, andMap, toElmDecoder, topic, data)
import Abi.Encode as AbiEncode exposing (Encoding(..), abiEncode)


{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator

-}


{-| "accountLevelsAddr()" function
-}
accountLevelsAddr : Address -> Call Address
accountLevelsAddr contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "accountLevelsAddr()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "admin()" function
-}
admin : Address -> Call Address
admin contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "admin()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" function
-}
amountFilled : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> String -> String -> Call BigInt
amountFilled contractAddress tokenGet amountGet tokenGive amountGive expires nonce user v r s =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce, AbiEncode.address user, AbiEncode.uint v, AbiEncode.staticBytes manually-enter-length-for-now-sry r, AbiEncode.staticBytes manually-enter-length-for-now-sry s ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" function
-}
availableVolume : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> String -> String -> Call BigInt
availableVolume contractAddress tokenGet amountGet tokenGive amountGive expires nonce user v r s =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce, AbiEncode.address user, AbiEncode.uint v, AbiEncode.staticBytes manually-enter-length-for-now-sry r, AbiEncode.staticBytes manually-enter-length-for-now-sry s ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "balanceOf(address,address)" function
-}
balanceOf : Address -> Address -> Address -> Call BigInt
balanceOf contractAddress token user =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "balanceOf(address,address)" [ AbiEncode.address token, AbiEncode.address user ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)" function
-}
cancelOrder : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> BigInt -> String -> String -> Call ()
cancelOrder contractAddress tokenGet amountGet tokenGive amountGive expires nonce v r s =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce, AbiEncode.uint v, AbiEncode.staticBytes manually-enter-length-for-now-sry r, AbiEncode.staticBytes manually-enter-length-for-now-sry s ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeAccountLevelsAddr(address)" function
-}
changeAccountLevelsAddr : Address -> Address -> Call ()
changeAccountLevelsAddr contractAddress accountLevelsAddr_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeAccountLevelsAddr(address)" [ AbiEncode.address accountLevelsAddr_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeAdmin(address)" function
-}
changeAdmin : Address -> Address -> Call ()
changeAdmin contractAddress admin_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeAdmin(address)" [ AbiEncode.address admin_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeFeeAccount(address)" function
-}
changeFeeAccount : Address -> Address -> Call ()
changeFeeAccount contractAddress feeAccount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeFeeAccount(address)" [ AbiEncode.address feeAccount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeFeeMake(uint256)" function
-}
changeFeeMake : Address -> BigInt -> Call ()
changeFeeMake contractAddress feeMake_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeFeeMake(uint256)" [ AbiEncode.uint feeMake_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeFeeRebate(uint256)" function
-}
changeFeeRebate : Address -> BigInt -> Call ()
changeFeeRebate contractAddress feeRebate_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeFeeRebate(uint256)" [ AbiEncode.uint feeRebate_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "changeFeeTake(uint256)" function
-}
changeFeeTake : Address -> BigInt -> Call ()
changeFeeTake contractAddress feeTake_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "changeFeeTake(uint256)" [ AbiEncode.uint feeTake_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "deposit()" function
-}
deposit : Address -> Call ()
deposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "deposit()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "depositToken(address,uint256)" function
-}
depositToken : Address -> Address -> BigInt -> Call ()
depositToken contractAddress token amount =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "depositToken(address,uint256)" [ AbiEncode.address token, AbiEncode.uint amount ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "feeAccount()" function
-}
feeAccount : Address -> Call Address
feeAccount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "feeAccount()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "feeMake()" function
-}
feeMake : Address -> Call BigInt
feeMake contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "feeMake()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "feeRebate()" function
-}
feeRebate : Address -> Call BigInt
feeRebate contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "feeRebate()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "feeTake()" function
-}
feeTake : Address -> Call BigInt
feeTake contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "feeTake()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "order(address,uint256,address,uint256,uint256,uint256)" function
-}
order : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Call ()
order contractAddress tokenGet amountGet tokenGive amountGive expires nonce =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "order(address,uint256,address,uint256,uint256,uint256)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "orderFills(address,bytes32)" function
-}
type alias OrderFill =
    { v0 : BigInt
    , v1 : BigInt
    , v2 : BigInt
    }


orderFills : Address -> Address -> String -> Call OrderFill
orderFills contractAddress a b =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "orderFills(address,bytes32)" [ AbiEncode.address a, AbiEncode.staticBytes manually-enter-length-for-now-sry b ]
    , nonce = Nothing
    , decoder = orderFillsDecoder
    }


orderFillsDecoder : Decoder OrderFill
orderFillsDecoder =
    abiDecode OrderFill
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "orders(address,bytes32)" function
-}
orders : Address -> Address -> String -> Call Bool
orders contractAddress a b =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "orders(address,bytes32)" [ AbiEncode.address a, AbiEncode.staticBytes manually-enter-length-for-now-sry b ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)" function
-}
testTrade : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> String -> String -> BigInt -> Address -> Call Bool
testTrade contractAddress tokenGet amountGet tokenGive amountGive expires nonce user v r s amount sender =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce, AbiEncode.address user, AbiEncode.uint v, AbiEncode.staticBytes manually-enter-length-for-now-sry r, AbiEncode.staticBytes manually-enter-length-for-now-sry s, AbiEncode.uint amount, AbiEncode.address sender ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "tokens(address,address)" function
-}
tokens : Address -> Address -> Address -> Call BigInt
tokens contractAddress a b =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "tokens(address,address)" [ AbiEncode.address a, AbiEncode.address b ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)" function
-}
trade : Address -> Address -> BigInt -> Address -> BigInt -> BigInt -> BigInt -> Address -> BigInt -> String -> String -> BigInt -> Call ()
trade contractAddress tokenGet amountGet tokenGive amountGive expires nonce user v r s amount =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)" [ AbiEncode.address tokenGet, AbiEncode.uint amountGet, AbiEncode.address tokenGive, AbiEncode.uint amountGive, AbiEncode.uint expires, AbiEncode.uint nonce, AbiEncode.address user, AbiEncode.uint v, AbiEncode.staticBytes manually-enter-length-for-now-sry r, AbiEncode.staticBytes manually-enter-length-for-now-sry s, AbiEncode.uint amount ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "withdraw(uint256)" function
-}
withdraw : Address -> BigInt -> Call ()
withdraw contractAddress amount =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "withdraw(uint256)" [ AbiEncode.uint amount ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "withdrawToken(address,uint256)" function
-}
withdrawToken : Address -> Address -> BigInt -> Call ()
withdrawToken contractAddress token amount =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "withdrawToken(address,uint256)" [ AbiEncode.address token, AbiEncode.uint amount ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "Cancel(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" event
-}
type alias Cancel =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , expires : BigInt
    , nonce : BigInt
    , user : Address
    , v : BigInt
    , r : String
    , s : String
    }


cancelEvent : Address -> LogFilter
cancelEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Cancel(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)" ]
    }


cancelDecoder : Decoder Cancel
cancelDecoder = 
    decode Cancel
        |> custom (data 0 AbiDecode.address)
        |> custom (data 1 AbiDecode.uint)
        |> custom (data 2 AbiDecode.address)
        |> custom (data 3 AbiDecode.uint)
        |> custom (data 4 AbiDecode.uint)
        |> custom (data 5 AbiDecode.uint)
        |> custom (data 6 AbiDecode.address)
        |> custom (data 7 AbiDecode.uint)
        |> custom (data 8 AbiDecode.staticBytes manually-enter-length-for-now-sry)
        |> custom (data 9 AbiDecode.staticBytes manually-enter-length-for-now-sry)


{-| "Deposit(address,address,uint256,uint256)" event
-}
type alias Deposit =
    { token : Address
    , user : Address
    , amount : BigInt
    , balance : BigInt
    }


depositEvent : Address -> LogFilter
depositEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Deposit(address,address,uint256,uint256)" ]
    }


depositDecoder : Decoder Deposit
depositDecoder = 
    decode Deposit
        |> custom (data 0 AbiDecode.address)
        |> custom (data 1 AbiDecode.address)
        |> custom (data 2 AbiDecode.uint)
        |> custom (data 3 AbiDecode.uint)


{-| "Order(address,uint256,address,uint256,uint256,uint256,address)" event
-}
type alias Order =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , expires : BigInt
    , nonce : BigInt
    , user : Address
    }


orderEvent : Address -> Maybe Address -> Maybe Address -> Maybe Address -> LogFilter
orderEvent contractAddress tokenGet tokenGive user = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = 
        [ Just <| U.keccak256 "Order(address,uint256,address,uint256,uint256,uint256,address)"
        , Maybe.map (abiEncode << AbiEncode.address) tokenGet
        , Maybe.map (abiEncode << AbiEncode.address) tokenGive
        , Maybe.map (abiEncode << AbiEncode.address) user
        ]
    }


orderDecoder : Decoder Order
orderDecoder = 
    decode Order
        |> custom (topic 1 AbiDecode.address)
        |> custom (data 0 AbiDecode.uint)
        |> custom (topic 2 AbiDecode.address)
        |> custom (data 1 AbiDecode.uint)
        |> custom (data 2 AbiDecode.uint)
        |> custom (data 3 AbiDecode.uint)
        |> custom (topic 3 AbiDecode.address)


{-| "Trade(address,uint256,address,uint256,address,address)" event
-}
type alias Trade =
    { tokenGet : Address
    , amountGet : BigInt
    , tokenGive : Address
    , amountGive : BigInt
    , get : Address
    , give : Address
    }


tradeEvent : Address -> LogFilter
tradeEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Trade(address,uint256,address,uint256,address,address)" ]
    }


tradeDecoder : Decoder Trade
tradeDecoder = 
    decode Trade
        |> custom (data 0 AbiDecode.address)
        |> custom (data 1 AbiDecode.uint)
        |> custom (data 2 AbiDecode.address)
        |> custom (data 3 AbiDecode.uint)
        |> custom (data 4 AbiDecode.address)
        |> custom (data 5 AbiDecode.address)


{-| "Withdraw(address,address,uint256,uint256)" event
-}
type alias Withdraw =
    { token : Address
    , user : Address
    , amount : BigInt
    , balance : BigInt
    }


withdrawEvent : Address -> LogFilter
withdrawEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Withdraw(address,address,uint256,uint256)" ]
    }


withdrawDecoder : Decoder Withdraw
withdrawDecoder = 
    decode Withdraw
        |> custom (data 0 AbiDecode.address)
        |> custom (data 1 AbiDecode.address)
        |> custom (data 2 AbiDecode.uint)
        |> custom (data 3 AbiDecode.uint)


